package install

import (
	"bufio"
	"github.com/genshen/pkg"
	"github.com/genshen/pkg/pkg/version"
	"io"
	"log"
	"os"
	"path/filepath"
	"text/template"
)

type cmakeDepData struct {
	LibName           string
	PkgHome           string
	SrcDir            string
	PkgDir            string
	InnerBuildCommand []string
	OuterBuildCommand []string
	InnerCMake        string
	OuterCMake        string
}

type cmakeDepHeaderData struct {
	IsProjectPkg      bool
	ProjectVendorPath string
}

const PkgCMakeHeader = `##### this file is generated by pkg tool, version ` + version.VERSION +
	`
##### For more details, please address https://github.com/genshen/pkg.

# vendor path
{{if .IsProjectPkg}}
# you should change VENDOR_PATH if you moved this directory to other place.
set(VENDOR_PATH {{.ProjectVendorPath}})
{{else}}
# VENDOR_PATH is set by environment variable 'PKG_VENDOR_PATH'.
set(VENDOR_PATH $ENV{PKG_VENDOR_PATH})
{{end}}
include_directories(${VENDOR_PATH}/include)
`

const CmakeToFile = `
# lib {{.LibName}}
# src: {{.SrcDir}}
# pkg: {{.PkgDir}}
# build command:
#     inner build command: {{.InnerBuildCommand}}
#     outer build command: {{.OuterBuildCommand}}
{{.InnerCMake}} # inner cmake
{{.OuterCMake}} # outer cmake
`

// pkgHome is always pkg root.
// write cmake script for all direct and indirect dependencies packages.
func createPkgDepCmake(pkgHome, srcHome string, isProjectPkg bool, depTree *pkg.DependencyTree) error {
	// create dep cmake file only for pkg based project.
	if !depTree.IsPkgPackage {
		return nil
	}

	// create cmake dep file for this package.
	if cmakeDepWriter, err := os.Create(filepath.Join(srcHome, pkg.CMakeDep)); err != nil {
		return err
	} else {
		pkgCMakeLibSet := make(map[string]bool)
		defer cmakeDepWriter.Close()
		bufWriter := bufio.NewWriter(cmakeDepWriter)

		// for project package, set @PkgHome/vendor as vendor path.
		// for non-project package, vendor path will not be set, which can be set in command line while building.

		// render header template.
		if err := renderCMakeHeader(bufWriter, isProjectPkg, pkg.GetVendorPath(pkgHome)); err != nil {
			return err
		}

		// compute and render body template.
		// (write cmake include and find_package script of all dependency packages)
		if err := cmakeLib(depTree, pkgHome, true, &pkgCMakeLibSet, bufWriter); err != nil {
			return err
		}
		if err := bufWriter.Flush(); err != nil {
			return err
		}
		log.Println("generated cmake for package", depTree.Context.PackageName)
	}
	// create cmake dep file for all its sub/child package.
	for _, v := range depTree.Dependencies {
		// for all non-root package, the srcHome is pkgHome/vendor/src/@packageName
		if p, err := pkg.GetPackageHomeSrcPath(v.Context.PackageName, v.Context.Version); err != nil {
			return err
		} else {
			err := createPkgDepCmake(pkgHome, p, false, v)
			if err != nil {
				return err // break loop.
			}
		}
	}
	return nil
}

// todo combine this function anf function buildPkg.
// root: indicating the root package
// pkgHome: absolute path for pkg home.
func cmakeLib(dep *pkg.DependencyTree, pkgHome string, root bool, cmakeLibSet *map[string]bool, writer io.Writer) error {
	// if this package has been built, skip it and its dependency.
	if _, ok := (*cmakeLibSet)[dep.Context.PackageName]; ok {
		return nil
	}

	for _, v := range dep.Dependencies {
		if err := cmakeLib(v, pkgHome, false, cmakeLibSet, writer); err != nil {
			return err // break loop.
		}
	}

	// do not generate cmake include and find_package script for root lib.
	if root {
		return nil
	}
	pkg.AddVendorPathEnv("") // relative path.
	src, err := pkg.GetPackageHomeSrcPath(dep.Context.PackageName, dep.Context.Version)
	if err != nil { // vendor/src/@pkg@version
		return err
	}
	pkg.AddPathEnv(dep.Context.PackageName, src) // add vars for this package, using relative path.
	// generating cmake script.
	toFile := cmakeDepData{
		LibName:    dep.Context.PackageName,
		InnerCMake: dep.SelfCMakeLib,
		OuterCMake: dep.CMakeLib,
		PkgHome:    pkgHome,
		SrcDir:     src,
		PkgDir:     pkg.GetPackagePkgPath("", dep.Context.PackageName),
	}
	// copy slice, don't modify the original data.
	toFile.OuterBuildCommand = make([]string, len(dep.Builder))
	toFile.InnerBuildCommand = make([]string, len(dep.SelfBuild))
	copy(toFile.OuterBuildCommand, dep.Builder)
	copy(toFile.InnerBuildCommand, dep.SelfBuild)

	if dep.CMakeLib != "" { // ignore self cmake if the cmake in override by outer cmake lib.
		toFile.InnerCMake = ""
	}
	if err := renderCMakeBody(toFile, writer); err != nil {
		return err
	}
	(*cmakeLibSet)[dep.Context.PackageName] = true
	return nil
}

// render script for cmake header.
// isProjectPkg: the current project package.
// ProjectVendorPath: current project's vendor path
func renderCMakeHeader(writer io.Writer, isProjectPkg bool, projectVendorPath string) error {
	data := cmakeDepHeaderData{IsProjectPkg: isProjectPkg, ProjectVendorPath: projectVendorPath}
	if t, err := template.New("header").Parse(PkgCMakeHeader); err != nil {
		return err
	} else {
		if err := t.Execute(writer, data); err != nil {
			return err
		}
	}
	return nil
}

func renderCMakeBody(cmake cmakeDepData, writer io.Writer) error {
	if cmake.InnerCMake == "" && cmake.OuterCMake == "" {
		return nil
	}
	cmake.InnerCMake = pkg.ProcessEnv(cmake.InnerCMake)
	cmake.OuterCMake = pkg.ProcessEnv(cmake.OuterCMake)
	// InnerBuildCommand and OuterBuildCommand is just used in comment.
	for i, v := range cmake.InnerBuildCommand {
		cmake.InnerBuildCommand[i] = pkg.ProcessEnv(v)
	}
	for i, v := range cmake.OuterBuildCommand {
		cmake.OuterBuildCommand[i] = pkg.ProcessEnv(v)
	}

	// render template.
	if t, err := template.New("cmake").Parse(CmakeToFile); err != nil {
		return err
	} else {
		if err := t.Execute(writer, cmake); err != nil {
			return err
		}
	}
	return nil
}
